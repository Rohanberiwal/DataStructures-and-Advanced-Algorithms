Sorting Algorithms 

Selection sort 
In this the datastucture used is sort of a stack where the Smallest elemet is at the bottom and the largest is at the to .

There are n**2  iteration in the selection  sort since the subsequent smallest element are chosen from the array and is put to the stack  .Due to the process of the selection , this is called as the selection sort . In the above discsuseed process a  new array is build that has the element in the ascedning order.

The second array could be removed using the assignmrnt operator .

The selection sort could be implement using without the second array as when the array process start just we have to swap the elements to get the sorted array .

Pseudo-Code :

SelectionSort(int A , int n) :
	for(startpos = 0   ; startpos <n  ; startpos ++)
	{
		minpos = startpos  ;
		for( i  =  minpos  ; i<n  ; i++)
		{	
		if(A[i] <A[minpos])
		{minpos =  i }

		}	
	Swap(A, startpos , minpos) ;
	} 

Time complexity of the above algorithm :
The selection  sort uses  :
t(n) =  n + n-1 +n-2 ... 1 == 0(n2) 


Selection sort Recursive algorihtm :

Recusrive steps :

To sort the array A : 
1.Find the min value segment and move to A[i] 
2. Apply selection sort to A again .

Base case for the selecttion sort is : 
1.Do nothing if n =1 . Size(A) =  1;

Pseudo code for Recurisve - ALgorithm  :

SelectionSort(A,n, start)
if(start>= n-1 )
return // null  ;
minpos = start  ;
for(i= 0   ; i<minpos l; i++)
if (A[i] >A[minpos])
minpos =  i ;

Swap(A, startpos , minpos) ; 

SelectionSort(A,startpos+1 , N) ;

Alternative Calcuation for selection  sort using Recurrance  ;

t(N) time to run the selection sort algorithm :
1.N->step to find the minimum and move to pos 0 . 
2. t(n-1) time to run  selection  sort on A[1] TO A[n-1] .

Recurrance 
t(n)  = n + t(n-1) // recursive relation for the recurisve selection  sort 
t(1) = 1 // base case 


In the above relation the recursve step is the t(n-1 ) that is used for the latter n-1 steps. 
