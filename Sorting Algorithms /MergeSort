Merge Sort 

Basic steps  :
1.Divide the array into two eqaul parts . 
2.seperately sort left and right part .

Last step  : Combine the two sorted halves to get the full array sorted .

Combine sorted list  :
Given two sorted list A and B combine into a sorted list C  .
Compare first element of the A and B .
Move it into C  .
Repeat until all the element IN  A and B are over .

How to merge two sorted List ? 
The two sorted list could be merge into a bigger sorted list using the comparision between them and adding them to the stack  .
The stack obtianed is a sorted Merged List  .


The combining of the two-sorted list is done using the stack and the whole merge sort is the operation of the divide and conquer  .

Point to remember in the Merge sort using the two sorted stack :

1.Use sorted stack 
2.Do the comparision of the top element of the stack and then add either of the two based on the comaprison to make the new stack sorted . 


Divde and conquer  :
The problem set is divide into two part and then both are solved individuslly independent of one anathor  .
In the end both of the two are  combined to get the output .

Merging pseudo code  :
This is for the two 
function Merge(A,m,B,n,C)
i =  j  = k = 0 ;
while(k < m+n )
// move the head of the stack A into the bigger stack c
 if(j==n or A[i] <= B[j])
{
C[k]=  B[j] ;
i++ ;
k ++ ;

}
//Move the head of the stack B into the Bigger stack C
if (i==m or A[i] > B[j])
{\
C[k] = B[j] ;
j=  j + 1; 
k =  k + 1 ;
}
} // close of the while loop 

Merge Sort Pseudo code :
To sort A[0....n-1] into B[0....n-1] 

Points: 
1. If n ==1 do nothing
2. Otherwise 
1.Sort the first half of the array 
2. sort the second half of the array 

Merge the L and the R part  into a new B.


The menitoned above is a rcursive Algorihtm where the first and the second point of the point 2 are the recusive part and these can be divided  .


Pseudo Merge Sort Algo  :
 
function  MergeSort(A , left , right ,B)
if (right-left ==1 ) // base case for the array 

B[0] = A[left] ;

if(right - left >1)
mid = (left+right)/2  ;
//Recusive part of the algo 

MergeSort(A, left , mid  , L) ; // divide the array into A 
MergeSort(A , mid , right,  R) ; // divide the array INTO B
Merge( L , mid-left  , R , right -mid , B) ; // The merge part to merge the third and the final part  .
